name: Deploy to GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  IMAGE_NAME: url-shortener-image
  ARTIFACT_REGISTRY_REPO: url-shortener-repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.GCP_PROJECT_ID }}-terraform-state"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="cluster_name=${{ env.GKE_CLUSTER_NAME }}" -var="gcp_region=${{ env.GCP_REGION }}"
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false -auto-approve -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="cluster_name=${{ env.GKE_CLUSTER_NAME }}" -var="gcp_region=${{ env.GCP_REGION }}"
        working-directory: ./terraform

      - name: Configure Docker to use Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
        working-directory: .

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest

      - name: Set full image path as environment variable
        run: |
          echo "IMAGE_FULL_PATH=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}

      - name: Create or Update Kubernetes App Config Secret
        run: |
          kubectl create secret generic app-config-secret \
            --from-literal=DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
            --from-literal=DATABASE_HOST_PORT=${{ secrets.DATABASE_HOST_PORT }} \
            --from-literal=DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            --from-literal=DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            --from-literal=DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
            --from-literal=DATABASE_TYPE=${{ secrets.DATABASE_TYPE }} \
            --from-literal=USER_AUTH_JWT_SECRET=${{ secrets.USER_AUTH_JWT_SECRET }} \
            --from-literal=SENTRY_ENABLED=${{ secrets.SENTRY_ENABLED }} \
            --from-literal=SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            --from-literal=OTEL_ENABLED=${{ secrets.OTEL_ENABLED }} \
            --from-literal=OTEL_SERVICE_NAME=${{ secrets.OTEL_SERVICE_NAME }} \
            --from-literal=OTEL_EXPORTER_OTLP_ENDPOINT=${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }} \
            --from-literal=METRICS_ENABLED=${{ secrets.METRICS_ENABLED }} \
            --from-literal=GRAFANA_PORT=${{ secrets.GRAFANA_PORT }} \
            --from-literal=PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }} \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_HOST_PORT: ${{ secrets.DATABASE_HOST_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_TYPE: ${{ secrets.DATABASE_TYPE }}
          USER_AUTH_JWT_SECRET: ${{ secrets.USER_AUTH_JWT_SECRET }}
          SENTRY_ENABLED: ${{ secrets.SENTRY_ENABLED }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          OTEL_ENABLED: ${{ secrets.OTEL_ENABLED }}
          OTEL_SERVICE_NAME: ${{ secrets.OTEL_SERVICE_NAME }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          METRICS_ENABLED: ${{ secrets.METRICS_ENABLED }}
          GRAFANA_PORT: ${{ secrets.GRAFANA_PORT }}
          PROMETHEUS_PORT: ${{ secrets.PROMETHEUS_PORT }}

      - name: Update Kubernetes deployment image
        run: |
          sed -i "s|YOUR_APP_IMAGE_PLACEHOLDER|${{ env.IMAGE_FULL_PATH }}|g" ./k8s/deployment.yaml

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Deploy Observability Components
        run: |
          echo "Deploying Jaeger..."
          kubectl apply -f k8s-observability/jaeger-all-in-one.yaml

          echo "Deploying Prometheus RBAC..."
          kubectl apply -f k8s-observability/prometheus-rbac.yaml
          echo "Deploying Prometheus Config..."
          kubectl apply -f k8s-observability/prometheus-config.yaml
          echo "Deploying Prometheus PVC..."
          kubectl apply -f k8s-observability/prometheus-pvc.yaml
          echo "Deploying Prometheus Deployment..."
          kubectl apply -f k8s-observability/prometheus-deployment.yaml

          echo "Deploying Grafana PVC..."
          kubectl apply -f k8s-observability/grafana-pvc.yaml
          echo "Deploying Grafana Datasource Config..."
          kubectl apply -f k8s-observability/grafana-datasource.yaml
          echo "Deploying Grafana Deployment..."
          kubectl apply -f k8s-observability/grafana-deployment.yaml
